{
  "resolvedId": "/Users/murtadha.ramadhan/Documents/personal-website-3/node_modules/@nuxt/image/dist/runtime/image.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { defu } from \"defu\";\nimport { hasProtocol, parseURL, joinURL, withLeadingSlash } from \"ufo\";\nimport { imageMeta } from \"./utils/meta.mjs\";\nimport { checkDensities, parseDensities, parseSize, parseSizes } from \"./utils/index.mjs\";\nimport { prerenderStaticImages } from \"./utils/prerender.mjs\";\nexport function createImage(globalOptions) {\n  const ctx = {\n    options: globalOptions\n  };\n  const getImage = (input, options = {}) => {\n    const image = resolveImage(ctx, input, options);\n    if (process.server && process.env.prerender) {\n      prerenderStaticImages(image.url);\n    }\n    return image;\n  };\n  const $img = (input, modifiers = {}, options = {}) => {\n    return getImage(input, {\n      ...options,\n      modifiers: defu(modifiers, options.modifiers || {})\n    }).url;\n  };\n  for (const presetName in globalOptions.presets) {\n    $img[presetName] = (source, modifiers, options) => $img(source, modifiers, { ...globalOptions.presets[presetName], ...options });\n  }\n  $img.options = globalOptions;\n  $img.getImage = getImage;\n  $img.getMeta = (input, options) => getMeta(ctx, input, options);\n  $img.getSizes = (input, options) => getSizes(ctx, input, options);\n  ctx.$img = $img;\n  return $img;\n}\nasync function getMeta(ctx, input, options) {\n  const image = resolveImage(ctx, input, { ...options });\n  if (typeof image.getMeta === \"function\") {\n    return await image.getMeta();\n  } else {\n    return await imageMeta(ctx, image.url);\n  }\n}\nfunction resolveImage(ctx, input, options) {\n  if (typeof input !== \"string\" || input === \"\") {\n    throw new TypeError(`input must be a string (received ${typeof input}: ${JSON.stringify(input)})`);\n  }\n  if (input.startsWith(\"data:\")) {\n    return {\n      url: input\n    };\n  }\n  const { provider, defaults } = getProvider(ctx, options.provider || ctx.options.provider);\n  const preset = getPreset(ctx, options.preset);\n  input = hasProtocol(input) ? input : withLeadingSlash(input);\n  if (!provider.supportsAlias) {\n    for (const base in ctx.options.alias) {\n      if (input.startsWith(base)) {\n        input = joinURL(ctx.options.alias[base], input.substr(base.length));\n      }\n    }\n  }\n  if (provider.validateDomains && hasProtocol(input)) {\n    const inputHost = parseURL(input).host;\n    if (!ctx.options.domains.find((d) => d === inputHost)) {\n      return {\n        url: input\n      };\n    }\n  }\n  const _options = defu(options, preset, defaults);\n  _options.modifiers = { ..._options.modifiers };\n  const expectedFormat = _options.modifiers.format;\n  if (_options.modifiers?.width) {\n    _options.modifiers.width = parseSize(_options.modifiers.width);\n  }\n  if (_options.modifiers?.height) {\n    _options.modifiers.height = parseSize(_options.modifiers.height);\n  }\n  const image = provider.getImage(input, _options, ctx);\n  image.format = image.format || expectedFormat || \"\";\n  return image;\n}\nfunction getProvider(ctx, name) {\n  const provider = ctx.options.providers[name];\n  if (!provider) {\n    throw new Error(\"Unknown provider: \" + name);\n  }\n  return provider;\n}\nfunction getPreset(ctx, name) {\n  if (!name) {\n    return {};\n  }\n  if (!ctx.options.presets[name]) {\n    throw new Error(\"Unknown preset: \" + name);\n  }\n  return ctx.options.presets[name];\n}\nfunction getSizes(ctx, input, opts) {\n  const width = parseSize(opts.modifiers?.width);\n  const height = parseSize(opts.modifiers?.height);\n  const sizes = parseSizes(opts.sizes);\n  const densities = opts.densities?.trim() ? parseDensities(opts.densities.trim()) : ctx.options.densities;\n  checkDensities(densities);\n  const hwRatio = width && height ? height / width : 0;\n  const sizeVariants = [];\n  const srcsetVariants = [];\n  if (Object.keys(sizes).length >= 1) {\n    for (const key in sizes) {\n      const variant = getSizesVariant(key, String(sizes[key]), height, hwRatio, ctx);\n      if (variant === void 0) {\n        continue;\n      }\n      sizeVariants.push({\n        size: variant.size,\n        screenMaxWidth: variant.screenMaxWidth,\n        media: `(max-width: ${variant.screenMaxWidth}px)`\n      });\n      for (const density of densities) {\n        srcsetVariants.push({\n          width: variant._cWidth * density,\n          src: getVariantSrc(ctx, input, opts, variant, density)\n        });\n      }\n    }\n    finaliseSizeVariants(sizeVariants);\n  } else {\n    for (const density of densities) {\n      const key = Object.keys(sizes)[0];\n      let variant = getSizesVariant(key, String(sizes[key]), height, hwRatio, ctx);\n      if (variant === void 0) {\n        variant = {\n          size: \"\",\n          screenMaxWidth: 0,\n          _cWidth: opts.modifiers?.width,\n          _cHeight: opts.modifiers?.height\n        };\n      }\n      srcsetVariants.push({\n        width: density,\n        src: getVariantSrc(ctx, input, opts, variant, density)\n      });\n    }\n  }\n  finaliseSrcsetVariants(srcsetVariants);\n  const defaultVariant = srcsetVariants[srcsetVariants.length - 1];\n  const sizesVal = sizeVariants.length ? sizeVariants.map((v) => `${v.media ? v.media + \" \" : \"\"}${v.size}`).join(\", \") : void 0;\n  const suffix = sizesVal ? \"w\" : \"x\";\n  const srcsetVal = srcsetVariants.map((v) => `${v.src} ${v.width}${suffix}`).join(\", \");\n  return {\n    sizes: sizesVal,\n    srcset: srcsetVal,\n    src: defaultVariant?.src\n  };\n}\nfunction getSizesVariant(key, size, height, hwRatio, ctx) {\n  const screenMaxWidth = ctx.options.screens && ctx.options.screens[key] || parseInt(key);\n  const isFluid = size.endsWith(\"vw\");\n  if (!isFluid && /^\\d+$/.test(size)) {\n    size = size + \"px\";\n  }\n  if (!isFluid && !size.endsWith(\"px\")) {\n    return void 0;\n  }\n  let _cWidth = parseInt(size);\n  if (!screenMaxWidth || !_cWidth) {\n    return void 0;\n  }\n  if (isFluid) {\n    _cWidth = Math.round(_cWidth / 100 * screenMaxWidth);\n  }\n  const _cHeight = hwRatio ? Math.round(_cWidth * hwRatio) : height;\n  return {\n    size,\n    screenMaxWidth,\n    _cWidth,\n    _cHeight\n  };\n}\nfunction getVariantSrc(ctx, input, opts, variant, density) {\n  return ctx.$img(\n    input,\n    {\n      ...opts.modifiers,\n      width: variant._cWidth ? variant._cWidth * density : void 0,\n      height: variant._cHeight ? variant._cHeight * density : void 0\n    },\n    opts\n  );\n}\nfunction finaliseSizeVariants(sizeVariants) {\n  sizeVariants.sort((v1, v2) => v1.screenMaxWidth - v2.screenMaxWidth);\n  let previousMedia = null;\n  for (let i = sizeVariants.length - 1; i >= 0; i--) {\n    const sizeVariant = sizeVariants[i];\n    if (sizeVariant.media === previousMedia) {\n      sizeVariants.splice(i, 1);\n    }\n    previousMedia = sizeVariant.media;\n  }\n  for (let i = 0; i < sizeVariants.length; i++) {\n    sizeVariants[i].media = sizeVariants[i + 1]?.media || \"\";\n  }\n}\nfunction finaliseSrcsetVariants(srcsetVariants) {\n  srcsetVariants.sort((v1, v2) => v1.width - v2.width);\n  let previousWidth = null;\n  for (let i = srcsetVariants.length - 1; i >= 0; i--) {\n    const sizeVariant = srcsetVariants[i];\n    if (sizeVariant.width === previousWidth) {\n      srcsetVariants.splice(i, 1);\n    }\n    previousWidth = sizeVariant.width;\n  }\n}\n",
      "start": 1717378023317,
      "end": 1717378023322,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1717378023322,
      "end": 1717378023322,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1717378023322,
      "end": 1717378023322,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1717378023322,
      "end": 1717378023322,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1717378023322,
      "end": 1717378023322,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1717378023322,
      "end": 1717378023322,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1717378023322,
      "end": 1717378023322,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1717378023322,
      "end": 1717378023322,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1717378023322,
      "end": 1717378023322,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1717378023322,
      "end": 1717378023322,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1717378023322,
      "end": 1717378023322,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1717378023322,
      "end": 1717378023322,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1717378023322,
      "end": 1717378023322,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1717378023322,
      "end": 1717378023322,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1717378023322,
      "end": 1717378023322,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1717378023322,
      "end": 1717378023322,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1717378023322,
      "end": 1717378023322,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1717378023322,
      "end": 1717378023322,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1717378023322,
      "end": 1717378023322,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1717378023322,
      "end": 1717378023322,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1717378023322,
      "end": 1717378023322,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "result": "import { defu } from \"defu\";\nimport { hasProtocol, parseURL, joinURL, withLeadingSlash } from \"ufo\";\nimport { imageMeta } from \"./utils/meta.mjs\";\nimport { checkDensities, parseDensities, parseSize, parseSizes } from \"./utils/index.mjs\";\nimport { prerenderStaticImages } from \"./utils/prerender.mjs\";\nexport function createImage(globalOptions) {\n  const ctx = {\n    options: globalOptions\n  };\n  const getImage = (input, options = {}) => {\n    const image = resolveImage(ctx, input, options);\n    if (process.env.prerender) {\n      prerenderStaticImages(image.url);\n    }\n    return image;\n  };\n  const $img = (input, modifiers = {}, options = {}) => {\n    return getImage(input, {\n      ...options,\n      modifiers: defu(modifiers, options.modifiers || {})\n    }).url;\n  };\n  for (const presetName in globalOptions.presets) {\n    $img[presetName] = (source, modifiers, options) => $img(source, modifiers, { ...globalOptions.presets[presetName], ...options });\n  }\n  $img.options = globalOptions;\n  $img.getImage = getImage;\n  $img.getMeta = (input, options) => getMeta(ctx, input, options);\n  $img.getSizes = (input, options) => getSizes(ctx, input, options);\n  ctx.$img = $img;\n  return $img;\n}\nasync function getMeta(ctx, input, options) {\n  const image = resolveImage(ctx, input, { ...options });\n  if (typeof image.getMeta === \"function\") {\n    return await image.getMeta();\n  } else {\n    return await imageMeta(ctx, image.url);\n  }\n}\nfunction resolveImage(ctx, input, options) {\n  if (typeof input !== \"string\" || input === \"\") {\n    throw new TypeError(`input must be a string (received ${typeof input}: ${JSON.stringify(input)})`);\n  }\n  if (input.startsWith(\"data:\")) {\n    return {\n      url: input\n    };\n  }\n  const { provider, defaults } = getProvider(ctx, options.provider || ctx.options.provider);\n  const preset = getPreset(ctx, options.preset);\n  input = hasProtocol(input) ? input : withLeadingSlash(input);\n  if (!provider.supportsAlias) {\n    for (const base in ctx.options.alias) {\n      if (input.startsWith(base)) {\n        input = joinURL(ctx.options.alias[base], input.substr(base.length));\n      }\n    }\n  }\n  if (provider.validateDomains && hasProtocol(input)) {\n    const inputHost = parseURL(input).host;\n    if (!ctx.options.domains.find((d) => d === inputHost)) {\n      return {\n        url: input\n      };\n    }\n  }\n  const _options = defu(options, preset, defaults);\n  _options.modifiers = { ..._options.modifiers };\n  const expectedFormat = _options.modifiers.format;\n  if (_options.modifiers?.width) {\n    _options.modifiers.width = parseSize(_options.modifiers.width);\n  }\n  if (_options.modifiers?.height) {\n    _options.modifiers.height = parseSize(_options.modifiers.height);\n  }\n  const image = provider.getImage(input, _options, ctx);\n  image.format = image.format || expectedFormat || \"\";\n  return image;\n}\nfunction getProvider(ctx, name) {\n  const provider = ctx.options.providers[name];\n  if (!provider) {\n    throw new Error(\"Unknown provider: \" + name);\n  }\n  return provider;\n}\nfunction getPreset(ctx, name) {\n  if (!name) {\n    return {};\n  }\n  if (!ctx.options.presets[name]) {\n    throw new Error(\"Unknown preset: \" + name);\n  }\n  return ctx.options.presets[name];\n}\nfunction getSizes(ctx, input, opts) {\n  const width = parseSize(opts.modifiers?.width);\n  const height = parseSize(opts.modifiers?.height);\n  const sizes = parseSizes(opts.sizes);\n  const densities = opts.densities?.trim() ? parseDensities(opts.densities.trim()) : ctx.options.densities;\n  checkDensities(densities);\n  const hwRatio = width && height ? height / width : 0;\n  const sizeVariants = [];\n  const srcsetVariants = [];\n  if (Object.keys(sizes).length >= 1) {\n    for (const key in sizes) {\n      const variant = getSizesVariant(key, String(sizes[key]), height, hwRatio, ctx);\n      if (variant === void 0) {\n        continue;\n      }\n      sizeVariants.push({\n        size: variant.size,\n        screenMaxWidth: variant.screenMaxWidth,\n        media: `(max-width: ${variant.screenMaxWidth}px)`\n      });\n      for (const density of densities) {\n        srcsetVariants.push({\n          width: variant._cWidth * density,\n          src: getVariantSrc(ctx, input, opts, variant, density)\n        });\n      }\n    }\n    finaliseSizeVariants(sizeVariants);\n  } else {\n    for (const density of densities) {\n      const key = Object.keys(sizes)[0];\n      let variant = getSizesVariant(key, String(sizes[key]), height, hwRatio, ctx);\n      if (variant === void 0) {\n        variant = {\n          size: \"\",\n          screenMaxWidth: 0,\n          _cWidth: opts.modifiers?.width,\n          _cHeight: opts.modifiers?.height\n        };\n      }\n      srcsetVariants.push({\n        width: density,\n        src: getVariantSrc(ctx, input, opts, variant, density)\n      });\n    }\n  }\n  finaliseSrcsetVariants(srcsetVariants);\n  const defaultVariant = srcsetVariants[srcsetVariants.length - 1];\n  const sizesVal = sizeVariants.length ? sizeVariants.map((v) => `${v.media ? v.media + \" \" : \"\"}${v.size}`).join(\", \") : void 0;\n  const suffix = sizesVal ? \"w\" : \"x\";\n  const srcsetVal = srcsetVariants.map((v) => `${v.src} ${v.width}${suffix}`).join(\", \");\n  return {\n    sizes: sizesVal,\n    srcset: srcsetVal,\n    src: defaultVariant?.src\n  };\n}\nfunction getSizesVariant(key, size, height, hwRatio, ctx) {\n  const screenMaxWidth = ctx.options.screens && ctx.options.screens[key] || parseInt(key);\n  const isFluid = size.endsWith(\"vw\");\n  if (!isFluid && /^\\d+$/.test(size)) {\n    size = size + \"px\";\n  }\n  if (!isFluid && !size.endsWith(\"px\")) {\n    return void 0;\n  }\n  let _cWidth = parseInt(size);\n  if (!screenMaxWidth || !_cWidth) {\n    return void 0;\n  }\n  if (isFluid) {\n    _cWidth = Math.round(_cWidth / 100 * screenMaxWidth);\n  }\n  const _cHeight = hwRatio ? Math.round(_cWidth * hwRatio) : height;\n  return {\n    size,\n    screenMaxWidth,\n    _cWidth,\n    _cHeight\n  };\n}\nfunction getVariantSrc(ctx, input, opts, variant, density) {\n  return ctx.$img(\n    input,\n    {\n      ...opts.modifiers,\n      width: variant._cWidth ? variant._cWidth * density : void 0,\n      height: variant._cHeight ? variant._cHeight * density : void 0\n    },\n    opts\n  );\n}\nfunction finaliseSizeVariants(sizeVariants) {\n  sizeVariants.sort((v1, v2) => v1.screenMaxWidth - v2.screenMaxWidth);\n  let previousMedia = null;\n  for (let i = sizeVariants.length - 1; i >= 0; i--) {\n    const sizeVariant = sizeVariants[i];\n    if (sizeVariant.media === previousMedia) {\n      sizeVariants.splice(i, 1);\n    }\n    previousMedia = sizeVariant.media;\n  }\n  for (let i = 0; i < sizeVariants.length; i++) {\n    sizeVariants[i].media = sizeVariants[i + 1]?.media || \"\";\n  }\n}\nfunction finaliseSrcsetVariants(srcsetVariants) {\n  srcsetVariants.sort((v1, v2) => v1.width - v2.width);\n  let previousWidth = null;\n  for (let i = srcsetVariants.length - 1; i >= 0; i--) {\n    const sizeVariant = srcsetVariants[i];\n    if (sizeVariant.width === previousWidth) {\n      srcsetVariants.splice(i, 1);\n    }\n    previousWidth = sizeVariant.width;\n  }\n}\n",
      "start": 1717378023322,
      "end": 1717378023462,
      "order": "normal",
      "sourcemaps": "{\n  \"version\": 3,\n  \"sources\": [\"/Users/murtadha.ramadhan/Documents/personal-website-3/node_modules/@nuxt/image/dist/runtime/image.mjs\"],\n  \"sourcesContent\": [\"import { defu } from \\\"defu\\\";\\nimport { hasProtocol, parseURL, joinURL, withLeadingSlash } from \\\"ufo\\\";\\nimport { imageMeta } from \\\"./utils/meta.mjs\\\";\\nimport { checkDensities, parseDensities, parseSize, parseSizes } from \\\"./utils/index.mjs\\\";\\nimport { prerenderStaticImages } from \\\"./utils/prerender.mjs\\\";\\nexport function createImage(globalOptions) {\\n  const ctx = {\\n    options: globalOptions\\n  };\\n  const getImage = (input, options = {}) => {\\n    const image = resolveImage(ctx, input, options);\\n    if (process.server && process.env.prerender) {\\n      prerenderStaticImages(image.url);\\n    }\\n    return image;\\n  };\\n  const $img = (input, modifiers = {}, options = {}) => {\\n    return getImage(input, {\\n      ...options,\\n      modifiers: defu(modifiers, options.modifiers || {})\\n    }).url;\\n  };\\n  for (const presetName in globalOptions.presets) {\\n    $img[presetName] = (source, modifiers, options) => $img(source, modifiers, { ...globalOptions.presets[presetName], ...options });\\n  }\\n  $img.options = globalOptions;\\n  $img.getImage = getImage;\\n  $img.getMeta = (input, options) => getMeta(ctx, input, options);\\n  $img.getSizes = (input, options) => getSizes(ctx, input, options);\\n  ctx.$img = $img;\\n  return $img;\\n}\\nasync function getMeta(ctx, input, options) {\\n  const image = resolveImage(ctx, input, { ...options });\\n  if (typeof image.getMeta === \\\"function\\\") {\\n    return await image.getMeta();\\n  } else {\\n    return await imageMeta(ctx, image.url);\\n  }\\n}\\nfunction resolveImage(ctx, input, options) {\\n  if (typeof input !== \\\"string\\\" || input === \\\"\\\") {\\n    throw new TypeError(`input must be a string (received ${typeof input}: ${JSON.stringify(input)})`);\\n  }\\n  if (input.startsWith(\\\"data:\\\")) {\\n    return {\\n      url: input\\n    };\\n  }\\n  const { provider, defaults } = getProvider(ctx, options.provider || ctx.options.provider);\\n  const preset = getPreset(ctx, options.preset);\\n  input = hasProtocol(input) ? input : withLeadingSlash(input);\\n  if (!provider.supportsAlias) {\\n    for (const base in ctx.options.alias) {\\n      if (input.startsWith(base)) {\\n        input = joinURL(ctx.options.alias[base], input.substr(base.length));\\n      }\\n    }\\n  }\\n  if (provider.validateDomains && hasProtocol(input)) {\\n    const inputHost = parseURL(input).host;\\n    if (!ctx.options.domains.find((d) => d === inputHost)) {\\n      return {\\n        url: input\\n      };\\n    }\\n  }\\n  const _options = defu(options, preset, defaults);\\n  _options.modifiers = { ..._options.modifiers };\\n  const expectedFormat = _options.modifiers.format;\\n  if (_options.modifiers?.width) {\\n    _options.modifiers.width = parseSize(_options.modifiers.width);\\n  }\\n  if (_options.modifiers?.height) {\\n    _options.modifiers.height = parseSize(_options.modifiers.height);\\n  }\\n  const image = provider.getImage(input, _options, ctx);\\n  image.format = image.format || expectedFormat || \\\"\\\";\\n  return image;\\n}\\nfunction getProvider(ctx, name) {\\n  const provider = ctx.options.providers[name];\\n  if (!provider) {\\n    throw new Error(\\\"Unknown provider: \\\" + name);\\n  }\\n  return provider;\\n}\\nfunction getPreset(ctx, name) {\\n  if (!name) {\\n    return {};\\n  }\\n  if (!ctx.options.presets[name]) {\\n    throw new Error(\\\"Unknown preset: \\\" + name);\\n  }\\n  return ctx.options.presets[name];\\n}\\nfunction getSizes(ctx, input, opts) {\\n  const width = parseSize(opts.modifiers?.width);\\n  const height = parseSize(opts.modifiers?.height);\\n  const sizes = parseSizes(opts.sizes);\\n  const densities = opts.densities?.trim() ? parseDensities(opts.densities.trim()) : ctx.options.densities;\\n  checkDensities(densities);\\n  const hwRatio = width && height ? height / width : 0;\\n  const sizeVariants = [];\\n  const srcsetVariants = [];\\n  if (Object.keys(sizes).length >= 1) {\\n    for (const key in sizes) {\\n      const variant = getSizesVariant(key, String(sizes[key]), height, hwRatio, ctx);\\n      if (variant === void 0) {\\n        continue;\\n      }\\n      sizeVariants.push({\\n        size: variant.size,\\n        screenMaxWidth: variant.screenMaxWidth,\\n        media: `(max-width: ${variant.screenMaxWidth}px)`\\n      });\\n      for (const density of densities) {\\n        srcsetVariants.push({\\n          width: variant._cWidth * density,\\n          src: getVariantSrc(ctx, input, opts, variant, density)\\n        });\\n      }\\n    }\\n    finaliseSizeVariants(sizeVariants);\\n  } else {\\n    for (const density of densities) {\\n      const key = Object.keys(sizes)[0];\\n      let variant = getSizesVariant(key, String(sizes[key]), height, hwRatio, ctx);\\n      if (variant === void 0) {\\n        variant = {\\n          size: \\\"\\\",\\n          screenMaxWidth: 0,\\n          _cWidth: opts.modifiers?.width,\\n          _cHeight: opts.modifiers?.height\\n        };\\n      }\\n      srcsetVariants.push({\\n        width: density,\\n        src: getVariantSrc(ctx, input, opts, variant, density)\\n      });\\n    }\\n  }\\n  finaliseSrcsetVariants(srcsetVariants);\\n  const defaultVariant = srcsetVariants[srcsetVariants.length - 1];\\n  const sizesVal = sizeVariants.length ? sizeVariants.map((v) => `${v.media ? v.media + \\\" \\\" : \\\"\\\"}${v.size}`).join(\\\", \\\") : void 0;\\n  const suffix = sizesVal ? \\\"w\\\" : \\\"x\\\";\\n  const srcsetVal = srcsetVariants.map((v) => `${v.src} ${v.width}${suffix}`).join(\\\", \\\");\\n  return {\\n    sizes: sizesVal,\\n    srcset: srcsetVal,\\n    src: defaultVariant?.src\\n  };\\n}\\nfunction getSizesVariant(key, size, height, hwRatio, ctx) {\\n  const screenMaxWidth = ctx.options.screens && ctx.options.screens[key] || parseInt(key);\\n  const isFluid = size.endsWith(\\\"vw\\\");\\n  if (!isFluid && /^\\\\d+$/.test(size)) {\\n    size = size + \\\"px\\\";\\n  }\\n  if (!isFluid && !size.endsWith(\\\"px\\\")) {\\n    return void 0;\\n  }\\n  let _cWidth = parseInt(size);\\n  if (!screenMaxWidth || !_cWidth) {\\n    return void 0;\\n  }\\n  if (isFluid) {\\n    _cWidth = Math.round(_cWidth / 100 * screenMaxWidth);\\n  }\\n  const _cHeight = hwRatio ? Math.round(_cWidth * hwRatio) : height;\\n  return {\\n    size,\\n    screenMaxWidth,\\n    _cWidth,\\n    _cHeight\\n  };\\n}\\nfunction getVariantSrc(ctx, input, opts, variant, density) {\\n  return ctx.$img(\\n    input,\\n    {\\n      ...opts.modifiers,\\n      width: variant._cWidth ? variant._cWidth * density : void 0,\\n      height: variant._cHeight ? variant._cHeight * density : void 0\\n    },\\n    opts\\n  );\\n}\\nfunction finaliseSizeVariants(sizeVariants) {\\n  sizeVariants.sort((v1, v2) => v1.screenMaxWidth - v2.screenMaxWidth);\\n  let previousMedia = null;\\n  for (let i = sizeVariants.length - 1; i >= 0; i--) {\\n    const sizeVariant = sizeVariants[i];\\n    if (sizeVariant.media === previousMedia) {\\n      sizeVariants.splice(i, 1);\\n    }\\n    previousMedia = sizeVariant.media;\\n  }\\n  for (let i = 0; i < sizeVariants.length; i++) {\\n    sizeVariants[i].media = sizeVariants[i + 1]?.media || \\\"\\\";\\n  }\\n}\\nfunction finaliseSrcsetVariants(srcsetVariants) {\\n  srcsetVariants.sort((v1, v2) => v1.width - v2.width);\\n  let previousWidth = null;\\n  for (let i = srcsetVariants.length - 1; i >= 0; i--) {\\n    const sizeVariant = srcsetVariants[i];\\n    if (sizeVariant.width === previousWidth) {\\n      srcsetVariants.splice(i, 1);\\n    }\\n    previousWidth = sizeVariant.width;\\n  }\\n}\\n\"],\n  \"mappings\": \"AAAA,SAAS,YAAY;AACrB,SAAS,aAAa,UAAU,SAAS,wBAAwB;AACjE,SAAS,iBAAiB;AAC1B,SAAS,gBAAgB,gBAAgB,WAAW,kBAAkB;AACtE,SAAS,6BAA6B;AAC/B,gBAAS,YAAY,eAAe;AACzC,QAAM,MAAM;AAAA,IACV,SAAS;AAAA,EACX;AACA,QAAM,WAAW,CAAC,OAAO,UAAU,CAAC,MAAM;AACxC,UAAM,QAAQ,aAAa,KAAK,OAAO,OAAO;AAC9C,QAAsB,QAAQ,IAAI,WAAW;AAC3C,4BAAsB,MAAM,GAAG;AAAA,IACjC;AACA,WAAO;AAAA,EACT;AACA,QAAM,OAAO,CAAC,OAAO,YAAY,CAAC,GAAG,UAAU,CAAC,MAAM;AACpD,WAAO,SAAS,OAAO;AAAA,MACrB,GAAG;AAAA,MACH,WAAW,KAAK,WAAW,QAAQ,aAAa,CAAC,CAAC;AAAA,IACpD,CAAC,EAAE;AAAA,EACL;AACA,aAAW,cAAc,cAAc,SAAS;AAC9C,SAAK,UAAU,IAAI,CAAC,QAAQ,WAAW,YAAY,KAAK,QAAQ,WAAW,EAAE,GAAG,cAAc,QAAQ,UAAU,GAAG,GAAG,QAAQ,CAAC;AAAA,EACjI;AACA,OAAK,UAAU;AACf,OAAK,WAAW;AAChB,OAAK,UAAU,CAAC,OAAO,YAAY,QAAQ,KAAK,OAAO,OAAO;AAC9D,OAAK,WAAW,CAAC,OAAO,YAAY,SAAS,KAAK,OAAO,OAAO;AAChE,MAAI,OAAO;AACX,SAAO;AACT;AACA,eAAe,QAAQ,KAAK,OAAO,SAAS;AAC1C,QAAM,QAAQ,aAAa,KAAK,OAAO,EAAE,GAAG,QAAQ,CAAC;AACrD,MAAI,OAAO,MAAM,YAAY,YAAY;AACvC,WAAO,MAAM,MAAM,QAAQ;AAAA,EAC7B,OAAO;AACL,WAAO,MAAM,UAAU,KAAK,MAAM,GAAG;AAAA,EACvC;AACF;AACA,SAAS,aAAa,KAAK,OAAO,SAAS;AACzC,MAAI,OAAO,UAAU,YAAY,UAAU,IAAI;AAC7C,UAAM,IAAI,UAAU,oCAAoC,OAAO,KAAK,KAAK,KAAK,UAAU,KAAK,CAAC,GAAG;AAAA,EACnG;AACA,MAAI,MAAM,WAAW,OAAO,GAAG;AAC7B,WAAO;AAAA,MACL,KAAK;AAAA,IACP;AAAA,EACF;AACA,QAAM,EAAE,UAAU,SAAS,IAAI,YAAY,KAAK,QAAQ,YAAY,IAAI,QAAQ,QAAQ;AACxF,QAAM,SAAS,UAAU,KAAK,QAAQ,MAAM;AAC5C,UAAQ,YAAY,KAAK,IAAI,QAAQ,iBAAiB,KAAK;AAC3D,MAAI,CAAC,SAAS,eAAe;AAC3B,eAAW,QAAQ,IAAI,QAAQ,OAAO;AACpC,UAAI,MAAM,WAAW,IAAI,GAAG;AAC1B,gBAAQ,QAAQ,IAAI,QAAQ,MAAM,IAAI,GAAG,MAAM,OAAO,KAAK,MAAM,CAAC;AAAA,MACpE;AAAA,IACF;AAAA,EACF;AACA,MAAI,SAAS,mBAAmB,YAAY,KAAK,GAAG;AAClD,UAAM,YAAY,SAAS,KAAK,EAAE;AAClC,QAAI,CAAC,IAAI,QAAQ,QAAQ,KAAK,CAAC,MAAM,MAAM,SAAS,GAAG;AACrD,aAAO;AAAA,QACL,KAAK;AAAA,MACP;AAAA,IACF;AAAA,EACF;AACA,QAAM,WAAW,KAAK,SAAS,QAAQ,QAAQ;AAC/C,WAAS,YAAY,EAAE,GAAG,SAAS,UAAU;AAC7C,QAAM,iBAAiB,SAAS,UAAU;AAC1C,MAAI,SAAS,WAAW,OAAO;AAC7B,aAAS,UAAU,QAAQ,UAAU,SAAS,UAAU,KAAK;AAAA,EAC/D;AACA,MAAI,SAAS,WAAW,QAAQ;AAC9B,aAAS,UAAU,SAAS,UAAU,SAAS,UAAU,MAAM;AAAA,EACjE;AACA,QAAM,QAAQ,SAAS,SAAS,OAAO,UAAU,GAAG;AACpD,QAAM,SAAS,MAAM,UAAU,kBAAkB;AACjD,SAAO;AACT;AACA,SAAS,YAAY,KAAK,MAAM;AAC9B,QAAM,WAAW,IAAI,QAAQ,UAAU,IAAI;AAC3C,MAAI,CAAC,UAAU;AACb,UAAM,IAAI,MAAM,uBAAuB,IAAI;AAAA,EAC7C;AACA,SAAO;AACT;AACA,SAAS,UAAU,KAAK,MAAM;AAC5B,MAAI,CAAC,MAAM;AACT,WAAO,CAAC;AAAA,EACV;AACA,MAAI,CAAC,IAAI,QAAQ,QAAQ,IAAI,GAAG;AAC9B,UAAM,IAAI,MAAM,qBAAqB,IAAI;AAAA,EAC3C;AACA,SAAO,IAAI,QAAQ,QAAQ,IAAI;AACjC;AACA,SAAS,SAAS,KAAK,OAAO,MAAM;AAClC,QAAM,QAAQ,UAAU,KAAK,WAAW,KAAK;AAC7C,QAAM,SAAS,UAAU,KAAK,WAAW,MAAM;AAC/C,QAAM,QAAQ,WAAW,KAAK,KAAK;AACnC,QAAM,YAAY,KAAK,WAAW,KAAK,IAAI,eAAe,KAAK,UAAU,KAAK,CAAC,IAAI,IAAI,QAAQ;AAC/F,iBAAe,SAAS;AACxB,QAAM,UAAU,SAAS,SAAS,SAAS,QAAQ;AACnD,QAAM,eAAe,CAAC;AACtB,QAAM,iBAAiB,CAAC;AACxB,MAAI,OAAO,KAAK,KAAK,EAAE,UAAU,GAAG;AAClC,eAAW,OAAO,OAAO;AACvB,YAAM,UAAU,gBAAgB,KAAK,OAAO,MAAM,GAAG,CAAC,GAAG,QAAQ,SAAS,GAAG;AAC7E,UAAI,YAAY,QAAQ;AACtB;AAAA,MACF;AACA,mBAAa,KAAK;AAAA,QAChB,MAAM,QAAQ;AAAA,QACd,gBAAgB,QAAQ;AAAA,QACxB,OAAO,eAAe,QAAQ,cAAc;AAAA,MAC9C,CAAC;AACD,iBAAW,WAAW,WAAW;AAC/B,uBAAe,KAAK;AAAA,UAClB,OAAO,QAAQ,UAAU;AAAA,UACzB,KAAK,cAAc,KAAK,OAAO,MAAM,SAAS,OAAO;AAAA,QACvD,CAAC;AAAA,MACH;AAAA,IACF;AACA,yBAAqB,YAAY;AAAA,EACnC,OAAO;AACL,eAAW,WAAW,WAAW;AAC/B,YAAM,MAAM,OAAO,KAAK,KAAK,EAAE,CAAC;AAChC,UAAI,UAAU,gBAAgB,KAAK,OAAO,MAAM,GAAG,CAAC,GAAG,QAAQ,SAAS,GAAG;AAC3E,UAAI,YAAY,QAAQ;AACtB,kBAAU;AAAA,UACR,MAAM;AAAA,UACN,gBAAgB;AAAA,UAChB,SAAS,KAAK,WAAW;AAAA,UACzB,UAAU,KAAK,WAAW;AAAA,QAC5B;AAAA,MACF;AACA,qBAAe,KAAK;AAAA,QAClB,OAAO;AAAA,QACP,KAAK,cAAc,KAAK,OAAO,MAAM,SAAS,OAAO;AAAA,MACvD,CAAC;AAAA,IACH;AAAA,EACF;AACA,yBAAuB,cAAc;AACrC,QAAM,iBAAiB,eAAe,eAAe,SAAS,CAAC;AAC/D,QAAM,WAAW,aAAa,SAAS,aAAa,IAAI,CAAC,MAAM,GAAG,EAAE,QAAQ,EAAE,QAAQ,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE,KAAK,IAAI,IAAI;AACxH,QAAM,SAAS,WAAW,MAAM;AAChC,QAAM,YAAY,eAAe,IAAI,CAAC,MAAM,GAAG,EAAE,GAAG,IAAI,EAAE,KAAK,GAAG,MAAM,EAAE,EAAE,KAAK,IAAI;AACrF,SAAO;AAAA,IACL,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,KAAK,gBAAgB;AAAA,EACvB;AACF;AACA,SAAS,gBAAgB,KAAK,MAAM,QAAQ,SAAS,KAAK;AACxD,QAAM,iBAAiB,IAAI,QAAQ,WAAW,IAAI,QAAQ,QAAQ,GAAG,KAAK,SAAS,GAAG;AACtF,QAAM,UAAU,KAAK,SAAS,IAAI;AAClC,MAAI,CAAC,WAAW,QAAQ,KAAK,IAAI,GAAG;AAClC,WAAO,OAAO;AAAA,EAChB;AACA,MAAI,CAAC,WAAW,CAAC,KAAK,SAAS,IAAI,GAAG;AACpC,WAAO;AAAA,EACT;AACA,MAAI,UAAU,SAAS,IAAI;AAC3B,MAAI,CAAC,kBAAkB,CAAC,SAAS;AAC/B,WAAO;AAAA,EACT;AACA,MAAI,SAAS;AACX,cAAU,KAAK,MAAM,UAAU,MAAM,cAAc;AAAA,EACrD;AACA,QAAM,WAAW,UAAU,KAAK,MAAM,UAAU,OAAO,IAAI;AAC3D,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;AACA,SAAS,cAAc,KAAK,OAAO,MAAM,SAAS,SAAS;AACzD,SAAO,IAAI;AAAA,IACT;AAAA,IACA;AAAA,MACE,GAAG,KAAK;AAAA,MACR,OAAO,QAAQ,UAAU,QAAQ,UAAU,UAAU;AAAA,MACrD,QAAQ,QAAQ,WAAW,QAAQ,WAAW,UAAU;AAAA,IAC1D;AAAA,IACA;AAAA,EACF;AACF;AACA,SAAS,qBAAqB,cAAc;AAC1C,eAAa,KAAK,CAAC,IAAI,OAAO,GAAG,iBAAiB,GAAG,cAAc;AACnE,MAAI,gBAAgB;AACpB,WAAS,IAAI,aAAa,SAAS,GAAG,KAAK,GAAG,KAAK;AACjD,UAAM,cAAc,aAAa,CAAC;AAClC,QAAI,YAAY,UAAU,eAAe;AACvC,mBAAa,OAAO,GAAG,CAAC;AAAA,IAC1B;AACA,oBAAgB,YAAY;AAAA,EAC9B;AACA,WAAS,IAAI,GAAG,IAAI,aAAa,QAAQ,KAAK;AAC5C,iBAAa,CAAC,EAAE,QAAQ,aAAa,IAAI,CAAC,GAAG,SAAS;AAAA,EACxD;AACF;AACA,SAAS,uBAAuB,gBAAgB;AAC9C,iBAAe,KAAK,CAAC,IAAI,OAAO,GAAG,QAAQ,GAAG,KAAK;AACnD,MAAI,gBAAgB;AACpB,WAAS,IAAI,eAAe,SAAS,GAAG,KAAK,GAAG,KAAK;AACnD,UAAM,cAAc,eAAe,CAAC;AACpC,QAAI,YAAY,UAAU,eAAe;AACvC,qBAAe,OAAO,GAAG,CAAC;AAAA,IAC5B;AACA,oBAAgB,YAAY;AAAA,EAC9B;AACF;\",\n  \"names\": []\n}\n"
    },
    {
      "name": "vite:css-post",
      "start": 1717378023462,
      "end": 1717378023462,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1717378023462,
      "end": 1717378023462,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1717378023462,
      "end": 1717378023462,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1717378023462,
      "end": 1717378023462,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1717378023462,
      "end": 1717378023462,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1717378023462,
      "end": 1717378023462,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1717378023462,
      "end": 1717378023462,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1717378023462,
      "end": 1717378023462,
      "order": "post"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1717378023462,
      "end": 1717378023462,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1717378023462,
      "end": 1717378023462,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1717378023462,
      "end": 1717378023462,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1717378023462,
      "end": 1717378023462,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1717378023462,
      "end": 1717378023462,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1717378023462,
      "end": 1717378023462,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1717378023462,
      "end": 1717378023462,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-template",
      "start": 1717378023462,
      "end": 1717378023462,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1717378023462,
      "end": 1717378023462,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1717378023462,
      "end": 1717378023462,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1717378023462,
      "end": 1717378023462,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1717378023462,
      "end": 1717378023462,
      "order": "normal"
    }
  ]
}
