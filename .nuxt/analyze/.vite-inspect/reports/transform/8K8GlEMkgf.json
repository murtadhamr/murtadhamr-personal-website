{
  "resolvedId": "/Users/murtadha.ramadhan/Documents/personal-website-3/node_modules/tailwind-merge/dist/lib/class-utils.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "var CLASS_PART_SEPARATOR = '-';\nfunction createClassUtils(config) {\n  var classMap = createClassMap(config);\n  var conflictingClassGroups = config.conflictingClassGroups,\n    _config$conflictingCl = config.conflictingClassGroupModifiers,\n    conflictingClassGroupModifiers = _config$conflictingCl === void 0 ? {} : _config$conflictingCl;\n  function getClassGroupId(className) {\n    var classParts = className.split(CLASS_PART_SEPARATOR);\n    // Classes like `-inset-1` produce an empty string as first classPart. We assume that classes for negative values are used correctly and remove it from classParts.\n    if (classParts[0] === '' && classParts.length !== 1) {\n      classParts.shift();\n    }\n    return getGroupRecursive(classParts, classMap) || getGroupIdForArbitraryProperty(className);\n  }\n  function getConflictingClassGroupIds(classGroupId, hasPostfixModifier) {\n    var conflicts = conflictingClassGroups[classGroupId] || [];\n    if (hasPostfixModifier && conflictingClassGroupModifiers[classGroupId]) {\n      return [].concat(conflicts, conflictingClassGroupModifiers[classGroupId]);\n    }\n    return conflicts;\n  }\n  return {\n    getClassGroupId: getClassGroupId,\n    getConflictingClassGroupIds: getConflictingClassGroupIds\n  };\n}\nfunction getGroupRecursive(classParts, classPartObject) {\n  if (classParts.length === 0) {\n    return classPartObject.classGroupId;\n  }\n  var currentClassPart = classParts[0];\n  var nextClassPartObject = classPartObject.nextPart.get(currentClassPart);\n  var classGroupFromNextClassPart = nextClassPartObject ? getGroupRecursive(classParts.slice(1), nextClassPartObject) : undefined;\n  if (classGroupFromNextClassPart) {\n    return classGroupFromNextClassPart;\n  }\n  if (classPartObject.validators.length === 0) {\n    return undefined;\n  }\n  var classRest = classParts.join(CLASS_PART_SEPARATOR);\n  return classPartObject.validators.find(function (_ref) {\n    var validator = _ref.validator;\n    return validator(classRest);\n  })?.classGroupId;\n}\nvar arbitraryPropertyRegex = /^\\[(.+)\\]$/;\nfunction getGroupIdForArbitraryProperty(className) {\n  if (arbitraryPropertyRegex.test(className)) {\n    var arbitraryPropertyClassName = arbitraryPropertyRegex.exec(className)[1];\n    var property = arbitraryPropertyClassName?.substring(0, arbitraryPropertyClassName.indexOf(':'));\n    if (property) {\n      // I use two dots here because one dot is used as prefix for class groups in plugins\n      return 'arbitrary..' + property;\n    }\n  }\n}\n/**\n * Exported for testing only\n */\nfunction createClassMap(config) {\n  var theme = config.theme,\n    prefix = config.prefix;\n  var classMap = {\n    nextPart: new Map(),\n    validators: []\n  };\n  var prefixedClassGroupEntries = getPrefixedClassGroupEntries(Object.entries(config.classGroups), prefix);\n  prefixedClassGroupEntries.forEach(function (_ref2) {\n    var classGroupId = _ref2[0],\n      classGroup = _ref2[1];\n    processClassesRecursively(classGroup, classMap, classGroupId, theme);\n  });\n  return classMap;\n}\nfunction processClassesRecursively(classGroup, classPartObject, classGroupId, theme) {\n  classGroup.forEach(function (classDefinition) {\n    if (typeof classDefinition === 'string') {\n      var classPartObjectToEdit = classDefinition === '' ? classPartObject : getPart(classPartObject, classDefinition);\n      classPartObjectToEdit.classGroupId = classGroupId;\n      return;\n    }\n    if (typeof classDefinition === 'function') {\n      if (isThemeGetter(classDefinition)) {\n        processClassesRecursively(classDefinition(theme), classPartObject, classGroupId, theme);\n        return;\n      }\n      classPartObject.validators.push({\n        validator: classDefinition,\n        classGroupId: classGroupId\n      });\n      return;\n    }\n    Object.entries(classDefinition).forEach(function (_ref3) {\n      var key = _ref3[0],\n        classGroup = _ref3[1];\n      processClassesRecursively(classGroup, getPart(classPartObject, key), classGroupId, theme);\n    });\n  });\n}\nfunction getPart(classPartObject, path) {\n  var currentClassPartObject = classPartObject;\n  path.split(CLASS_PART_SEPARATOR).forEach(function (pathPart) {\n    if (!currentClassPartObject.nextPart.has(pathPart)) {\n      currentClassPartObject.nextPart.set(pathPart, {\n        nextPart: new Map(),\n        validators: []\n      });\n    }\n    currentClassPartObject = currentClassPartObject.nextPart.get(pathPart);\n  });\n  return currentClassPartObject;\n}\nfunction isThemeGetter(func) {\n  return func.isThemeGetter;\n}\nfunction getPrefixedClassGroupEntries(classGroupEntries, prefix) {\n  if (!prefix) {\n    return classGroupEntries;\n  }\n  return classGroupEntries.map(function (_ref4) {\n    var classGroupId = _ref4[0],\n      classGroup = _ref4[1];\n    var prefixedClassGroup = classGroup.map(function (classDefinition) {\n      if (typeof classDefinition === 'string') {\n        return prefix + classDefinition;\n      }\n      if (typeof classDefinition === 'object') {\n        return Object.fromEntries(Object.entries(classDefinition).map(function (_ref5) {\n          var key = _ref5[0],\n            value = _ref5[1];\n          return [prefix + key, value];\n        }));\n      }\n      return classDefinition;\n    });\n    return [classGroupId, prefixedClassGroup];\n  });\n}\n\nexport { createClassMap, createClassUtils };\n//# sourceMappingURL=class-utils.mjs.map\n",
      "start": 1710546154336,
      "end": 1710546154412,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1710546154412,
      "end": 1710546154412,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1710546154412,
      "end": 1710546154412,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1710546154412,
      "end": 1710546154412,
      "order": "pre"
    },
    {
      "name": "fontaine-transform",
      "start": 1710546154412,
      "end": 1710546154412,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1710546154412,
      "end": 1710546154412,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1710546154412,
      "end": 1710546154412,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1710546154412,
      "end": 1710546154412,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1710546154412,
      "end": 1710546154412,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1710546154412,
      "end": 1710546154412,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1710546154412,
      "end": 1710546154412,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1710546154412,
      "end": 1710546154412,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1710546154412,
      "end": 1710546154412,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1710546154412,
      "end": 1710546154412,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1710546154412,
      "end": 1710546154412,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1710546154412,
      "end": 1710546154412,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1710546154412,
      "end": 1710546154412,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1710546154412,
      "end": 1710546154412,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1710546154412,
      "end": 1710546154412,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1710546154412,
      "end": 1710546154412,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1710546154412,
      "end": 1710546154412,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1710546154412,
      "end": 1710546154412,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1710546154412,
      "end": 1710546154412,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1710546154412,
      "end": 1710546154412,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1710546154412,
      "end": 1710546154412,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1710546154412,
      "end": 1710546154412,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1710546154412,
      "end": 1710546154412,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1710546154412,
      "end": 1710546154412,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1710546154412,
      "end": 1710546154412,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1710546154412,
      "end": 1710546154412,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1710546154412,
      "end": 1710546154412,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1710546154412,
      "end": 1710546154412,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1710546154412,
      "end": 1710546154412,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1710546154412,
      "end": 1710546154412,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1710546154412,
      "end": 1710546154412,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1710546154412,
      "end": 1710546154412,
      "order": "normal"
    }
  ]
}
